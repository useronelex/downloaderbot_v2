import os
import asyncio
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiohttp import web
from aiogram import exceptions

from downloader import extract_instagram_video

# ================== CONFIG ==================
BOT_TOKEN = os.getenv("BOT_TOKEN")
#WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: https://downloaderbot-v2.onrender.com
WEBHOOK_URL = "https://downloaderbot-v2.onrender.com"
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"
FULL_WEBHOOK_URL = f"{WEBHOOK_URL}{WEBHOOK_PATH}"

if not BOT_TOKEN or not WEBHOOK_URL:
    raise ValueError("‚ùå BOT_TOKEN –∞–±–æ WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω–æ –≤ environment variables")

# ================== BOT & DISPATCHER ==================
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
router = Router()
dp.include_router(router)  # üîπ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤—ñ–¥—Ä–∞–∑—É

# ================== HANDLERS ==================
@router.message(F.text.contains("instagram.com"))
async def handle_video(message: types.Message):
    print(f"üîπ Received message: {message.text}")
    wait_msg = await message.answer("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –≤—ñ–¥–µ–æ...")

    try:
        link = await extract_instagram_video(message.text.strip())
    except Exception as e:
        await wait_msg.edit_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏: {e}")
        return

    await wait_msg.delete()

    try:
        if message.text.strip().startswith("http") and len(message.text.strip().split()) == 1:
            await message.delete()
    except exceptions.TelegramForbiddenError:
        await message.answer("‚ö†Ô∏è –ù–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –≤–∏–¥–∞–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    if link:
        await message.answer_video(link)
        print(f"‚úÖ Video sent for link: {message.text}")
    else:
        await message.answer("üòµ –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–µ–æ.")
        print(f"‚ö†Ô∏è No video found for link: {message.text}")

# ================== WEBHOOK SERVER ==================
async def handle_webhook(request):
    try:
        update_json = await request.json()
        print("üîπ Incoming update:", update_json)
        update = types.Update(**update_json)
        await dp.feed_update(update)
    except Exception as e:
        print(f"‚ùå Error handling update: {e}")
        return web.Response(status=500, text="Internal Server Error")
    return web.Response(text="ok")

async def on_startup(app):
    print(f"üõ† Setting webhook: {FULL_WEBHOOK_URL}")
    await bot.set_webhook(FULL_WEBHOOK_URL)
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ webhook!")

async def on_shutdown(app):
    await bot.delete_webhook()
    await bot.session.close()
    print("üßπ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É")

# ================== AIOHTTP APP ==================
app = web.Application()
app.router.add_post(WEBHOOK_PATH, handle_webhook)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    port = int(os.getenv("PORT", 8000))
    print(f"üöÄ Starting web server on port {port}")
    web.run_app(app, host="0.0.0.0", port=port)
