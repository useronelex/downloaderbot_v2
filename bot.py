import os
import asyncio
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram import exceptions
from aiogram.client.default import DefaultBotProperties
from aiohttp import web

from downloader import extract_instagram_video

# ================== CONFIG ==================
BOT_TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∑ Render environment
WEBHOOK_URL = "https://downloaderbot-v2.onrender.com"  # —Ç–≤—ñ–π –ø—É–±–ª—ñ—á–Ω–∏–π URL –Ω–∞ Render
WEBHOOK_PATH = f"/webhook/{BOT_TOKEN}"  # —à–ª—è—Ö –¥–ª—è Telegram webhook
FULL_WEBHOOK_URL = WEBHOOK_URL + WEBHOOK_PATH  # –ø–æ–≤–Ω–∏–π URL, –∫—É–¥–∏ Telegram —à–ª–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è

if not BOT_TOKEN or not WEBHOOK_URL:
    raise ValueError("‚ùå BOT_TOKEN –∞–±–æ WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω–æ –≤ environment variables")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
router = Router()

# ================== HANDLERS ==================
@router.message(F.text.contains("instagram.com"))
async def handle_video(message: types.Message):
    wait_msg = await message.answer("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –≤—ñ–¥–µ–æ...")

    try:
        link = await extract_instagram_video(message.text.strip())
    except Exception as e:
        await wait_msg.edit_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏: {e}")
        return

    await wait_msg.delete()

    try:
        if message.text.strip().startswith("http") and len(message.text.strip().split()) == 1:
            await message.delete()
    except exceptions.TelegramForbiddenError:
        await message.answer("‚ö†Ô∏è –ù–µ–º–∞—î –¥–æ–∑–≤–æ–ª—É –≤–∏–¥–∞–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")

    if link:
        await message.answer_video(link)
    else:
        await message.answer("üòµ –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤—ñ–¥–µ–æ.")


# ================== WEBHOOK SERVER ==================
async def handle_webhook(request):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ Telegram"""
    update = types.Update(**await request.json())
    await dp.feed_update(update)
    return web.Response(text="ok")


async def on_startup(app):
    await bot.set_webhook(FULL_WEBHOOK_URL)
    dp.include_router(router)
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ webhook!")


async def on_shutdown(app):
    print("üßπ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞...")
    await bot.delete_webhook()
    await bot.session.close()


# ================== APP ==================
app = web.Application()
app.router.add_post(WEBHOOK_PATH, handle_webhook)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
